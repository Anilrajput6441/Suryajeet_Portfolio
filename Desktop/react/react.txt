---why React --->>>
a) SPA (single page application) - only required part of the website changed like Gmail
     partial chnage - only required parts changed
     SOC - seperation of concern
     interactivity increases (no reload required)

b) component driven-helps to create component driven 
    --reuasble components
    --customizable reusable components
    --props(parameters of reusable components)

c) clean structured and manageable code
    --src
       --components
                --header
                --hero
                --searchsection
                --footer

d) proper API data usage(axios)

e) state management --communication between components via Global Data
    --context API --> react inbuilt
    --Redux 

f)Virtual DOM -- tree of objects of javascript
    --virtual dom identify the change between two v-DOMs(i.e.,between the v-DOM of real DOM and the updated v-DOM) using Diffing/Reconciliation  Algo
    and updates only the neccessary changes-making it faster than to chnage the entire Real DOM which is slow and cause Reload

g)Super Power of Hooks 
    --useEffect()--> on page load or state data changed
    --useState()--> to manage and update state data
    --creation of  custom hooks as needed using the "use" keyword at the start for a clean coding practices

h)It helps in efficient testing of front-end components via tools like Jest by incorporating modular efficient and manageable code

i) proper usage of ".env" files to store secret or environment variables


----Drawbacks ---->
a)inefficient and ineffective SEO search engine optimization
b)slower and increase loadtime due to complete CSR-client side rendering
c)no image and static  resource optimization 
d)no middlewere and edge function support
e)no API routes(backend)-React is a frontend only Framework 
f)increased bundle size
g)lesser scalabilty and performance than Next.js  